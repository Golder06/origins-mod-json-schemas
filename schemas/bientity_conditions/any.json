{
	"$id": "https://snavesutit.github.io/origins-mod-schemas/",
	"title": "BiEntity Condition",
	"description": "Bi-entity Condition Types operate on a Pair<Entity, Entity>, or in simpler terms: an actor and a target. The actor and target is determined depending on the used power type, and can be swapped. These are available to power/condition types that provides a bientity_condition object field.",
	"type": "object",
	"required": [
		"type"
	],
	"properties": {
		"type": {
			"description": "Bi-entity Condition Types operate on a Pair<Entity, Entity>, or in simpler terms: an actor and a target. The actor and target is determined depending on the used power type, and can be swapped. These are available to power/condition types that provides a bientity_condition object field.",
			"type": "string"
		}
	},
	"allOf": [
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:attack_target"
					}
				}
			},
			"then": {
				"$ref": "./attack_target.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:attacker"
					}
				}
			},
			"then": {
				"$ref": "./attacker.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:can_see"
					}
				}
			},
			"then": {
				"$ref": "./can_see.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:distance"
					}
				}
			},
			"then": {
				"$ref": "./distance.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:owner"
					}
				}
			},
			"then": {
				"$ref": "./owner.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:relative_rotation"
					}
				}
			},
			"then": {
				"$ref": "./relative_rotation.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:riding_recursive"
					}
				}
			},
			"then": {
				"$ref": "./riding_recursive.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:riding_root"
					}
				}
			},
			"then": {
				"$ref": "./riding_root.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:riding"
					}
				}
			},
			"then": {
				"$ref": "./riding.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:actor_condition"
					}
				}
			},
			"then": {
				"$ref": "./actor_condition.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:both"
					}
				}
			},
			"then": {
				"$ref": "./both.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:either"
					}
				}
			},
			"then": {
				"$ref": "./either.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:invert"
					}
				}
			},
			"then": {
				"$ref": "./invert.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:target_condition"
					}
				}
			},
			"then": {
				"$ref": "./target_condition.json"
			}
		},
		{
			"if": {
				"properties": {
					"type": {
						"const": "origins:undirected"
					}
				}
			},
			"then": {
				"$ref": "./undirected.json"
			}
		}
	]
}